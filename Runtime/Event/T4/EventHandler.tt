<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// ReSharper disable InconsistentNaming
// ReSharper disable All
/*|✩ - - - - - - - - - - |||
|||✩ Automatic Generate  |||
|||✩ - - - - - - - - - - |*/

using System;

namespace AIO
{
<#
    const int numbers = 9;
    for (var i = 0; i <= numbers; ++i)
    {
        var type = string.Join(", ", Enumerable.Range(0, i).Select(n => $"T{n + 1}"));
        var param = string.Join(", ", Enumerable.Range(0, i).Select(n => string.Format("T{0} t{0}", n + 1)));
        const string tostringSpace = ",\n             ";
        var tostring = string.Join(tostringSpace, Enumerable.Range(0, i).Select(n => $"typeof(T{n + 1}).Name"));
        const string hashSpace = "\n                                                  ^ ";
        var hash = string.Join(hashSpace, Enumerable.Range(0, i).Select(n => $"typeof(T{n + 1}).GetHashCode()"));
        if (i == 0)
        {
            tostring = "\"No Parameters\"";
            hash = string.Empty;
        }
        else hash = $" ^ {hash}";
#>
    #region EventHandler<#= i > 0 ? $"<{type}>" : "" #>

    public abstract class EventHandler<#= i > 0 ? $"<{type}> " : "" #> : IEventHandler
    {
        public abstract int Key { get; }
    
        public EventHandler() { EventSystem.AddListener<#= i > 0 ? $"<{type}>" : "" #>(Key, Invoke); }

        protected abstract void Invoke(<#= param #>);

        #region Overrides of Object

        public sealed override bool Equals(object obj) => obj is EventHandler<#= i > 0 ? $"<{type}> " : " " #>handler && handler.Key == Key;

        public sealed override string ToString() => string.Concat
            (Key, ":(",
             <#= tostring #>, 
             ")");

        public sealed override int GetHashCode() => Key.GetHashCode()<#= i > 0 ? $"\n                                                 {hash};" : ";" #> 

        #endregion
    }

    #endregion

<#
    }
#>
}
