<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// ReSharper disable InconsistentNaming
// ReSharper disable All
/*|✩ - - - - - - - - - - |||
|||✩ Automatic Generate  |||
|||✩ - - - - - - - - - - |*/

using System;
using AIO.UEngine;

namespace AIO
{
<#
    var numbers = 9;

    for (var i = 1; i <= numbers; ++i)
    {
        var type = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n}"));
        var param = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n} t{n}"));
        var ins = string.Join(", ", Enumerable.Range(1, i).Select(n => $"t{n}"));
#>
    #region <#= type #>
    
    /// <summary>
    /// Relay interface for <#= type #> type.
    /// </summary>
    public interface IRelayLinkAction<<#= type #>> : IRelayLinkBase<Action<<#= type #>>> { }

    /// <summary>
    /// Relay class for <#= type #> type.
    /// </summary>
    internal class RelayLinkAction<<#= type #>> : RelayLinkBase<Action<<#= type #>>>, IRelayLinkAction<<#= type #>>
    {
        public RelayLinkAction(RelayBase<Action<<#= type #>>> relay) : base(relay) { }
    }

    /// <summary>
    /// Relay class for <#= type #> type.
    /// </summary>
    public class RelayAction<<#= type #>> : RelayBase<Action<<#= type #>>>, IRelayLinkAction<<#= type #>>
    {
        private IRelayLinkAction<<#= type #>> link = null;

        /// <summary>
        /// Get an IRelayLinkAction object that wraps this Relay without allowing Dispatch.
        /// Provides a safe interface for classes outside the Relay's "owner".
        /// </summary>
        public IRelayLinkAction<<#= type #>> Link
        {
            get
            {
                if (HasLink) return link;
                link     = new RelayLinkAction<<#= type #>>(this);
                HasLink = true;
                return link;
            }
        }

        public void Dispatch(<#= param #>)
        {
            for (var i = _Count; i > 0; --i)
            {
                if (i > _Count) throw IndexOutError;
                if (_Listeners[i - 1] != null) _Listeners[i - 1](<#= type.ToLower() #>);
                else RemoveAt(i - 1);
            }

            for (var i = _OnceCount; i > 0; --i)
            {
#if SIGTRAP_RELAY_DBG
				_RelayDebugger.DebugRemListener(this, _listenersOnce[i - 1]); // Remove first to prevent potential infinite loops
#endif
                _OnceCount = RemoveAt(_ListenersOnce, _OnceCount, i - 1);
                _ListenersOnce[i - 1]?.Invoke(<#= type.ToLower() #>);
            }
        }
    }

    #endregion

<#
    }
#>
    #region No Type

    /// <summary>
    /// Relay interface for no type.
    /// </summary>
    public interface IRelayLinkAction : IRelayLinkBase<Action> { }

    /// <summary>
    /// Relay class for no type.
    /// </summary>
    public class RelayLinkAction : RelayLinkBase<Action>, IRelayLinkAction
    {
        public RelayLinkAction(RelayBase<Action> relay) : base(relay) { }
    }

    public class RelayAction : RelayBase<Action>, IRelayLinkAction
    {
        private IRelayLinkAction link = null;

        /// <summary>
        /// Get an IRelayLinkAction object that wraps this Relay without allowing Dispatch.
        /// Provides a safe interface for classes outside the Relay's "owner".
        /// </summary>
        public IRelayLinkAction Link
        {
            get
            {
                if (HasLink) return link;
                link    = new RelayLinkAction(this);
                HasLink = true;
                return link;
            }
        }

        public void Dispatch()
        {
            // Persistent listeners
            // Reversal allows self-removal during dispatch (doesn't skip next listener)
            // Reversal allows safe addition during dispatch (doesn't fire immediately)
            for (var i = _Count; i > 0; --i)
            {
                if (i > _Count) throw IndexOutError;
                if (_Listeners[i - 1] != null) _Listeners[i - 1]();
                else
                    RemoveAt(i - 1);
            }

            // One-time listeners - reversed for safe addition and auto-removal
            for (var i = _OnceCount; i > 0; --i)
            {
                // Remove first to prevent potential infinite loops
#if SIGTRAP_RELAY_DBG
				_RelayDebugger.DebugRemListener(this, _listenersOnce[i - 1]);
#endif
                _OnceCount = RemoveAt(_ListenersOnce, _OnceCount, i - 1);
                _ListenersOnce[i - 1]?.Invoke();
            }
        }
    }

    #endregion
}
